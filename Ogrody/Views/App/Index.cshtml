@{
    ViewBag.Title = "Home Page";
}



<div id="text" style="background-color:white; width:100%">

    <div style="padding:0px;">
        <div class="row">
            <div id="cennikTable" class="collapse col-md-6">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Nazwa</th>
                                <th>Kaucja</th>
                                <th>Stawka dobowa/godzinowa</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>1</td>
                                <td>Areator JakisTam 1Km</td>
                                <td>500 zl</td>
                                <td>100zl/40zl</td>
                            </tr>
                            <tr>
                                <td>2</td>
                                <td>Wertykulator CosTam 15Km</td>
                                <td>700zl</td>
                                <td>200zl/60zl</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="collapse col-md-3" id="kontaktCollapse">
                <h3>Kontakt:</h3>
                <p>Tel:</p>
                <p>mail:</p>
                <p>adres:</p>
            </div>
        </div>
        <div id="tekstgl" class="row">
            <h4 id="Costam" class="text-center">Coś tam</h4>
            <div class="col-md-2 text-center">
                <h3>Klasy</h3>
                <p>
                    O klasach można powiedzieć, iż jest to zestaw metod. Przykładowo, klasa Console zawiera zestaw metod służących do operowania na konsoli. Myśl o klasach jak o przyborniku, paczuszce zawierającej przydatne narzędzia.
                </p>
            </div>
            <div class="col-md-2 text-center">
                <h3>Funkcje</h3>
                <p>
                    Funkcje jako takie nie istnieją w C#! Zamiast tego mówimy o wspomnianych już w tej książce metodach. Idea jest w zasadzie identyczna, ale aby uniknąć nieporozumień, będę się starał nie używać słowa funkcja. Z tym słowem spotkasz się zapewne nie raz w swojej karierze, gdyż mechanizm funkcji jest obecny w wielu językach programowania. Funkcje to wydzielony blok kodu realizujący jakieś zadanie
                </p>
            </div>
            <div class="col-md-8 text-center" style="padding-left:10px;">
                <h3>Programowanie proceduralne</h3>
                <p>
                    Idea programowania proceduralnego zaczęła się pojawiać wraz z bardziej zaawansowanymi aplikacjami. Tradycyjny moduł projektowania nie sprawdzał się dobrze, gdy programy zaczęły być bardziej skomplikowane — wówczas ich konserwacja i naprawianie błędów były niezwykle trudne. Ktoś mądry wymyślił wtedy, że można by było dzielić program na mniejsze części — tzw. procedury. Przykładowo, jeżeli napisano kod, który wyświetla pewien komunikat i kończy działanie programu, a ów fragment jest używany wiele razy w tej aplikacji, to należałoby go dublować wiele razy. Powoduje to nie tylko zwiększenie objętości kodu, ale również potęguje podatność na błędy. Bo co się stanie, jeżeli właśnie w tym małym, wielokrotnie powtórzonym w aplikacji fragmencie, wystąpi błąd? Należałoby wówczas przeszukać cały kod i w każdym miejscu poprawiać usterkę. Teraz, w nowoczesnych językach programowania można umieścić pewien fragment kodu w procedurze i wywołać ją za każdym razem, kiedy zajdzie potrzeba jego wykonania! Generalnie w językach takich jak C++, PHP, Java nie istnieją procedury, lecz funkcje. Sama idea jest identyczna, ale z uwagi na to, iż w C# procedury nie istnieją, nie będę o nich więcej wspominał.
                </p>
            </div>
        </div>
    </div>

    <div id="tekstprawa" class="row col-md-4 col-md-offset-4">
        <h4>Nagalowek</h4>
        <p>
            Metody - metody mogą posiadać tzw. Parametry, Innymi słowy — przekazujemy metodzie tekst do wyświetlenia na konsoli, przekazujesz metodzie dane, na których ona operuje. Obowiązkowym elementem każdej metody są nawiasy, w których podaje się parametry. Jednak nie wszystkie metody w środowisku .NET Framework mają parametry — w takim wypadku pozostawiamy pusty nawias
            Klasy - O klasach można powiedzieć, iż jest to zestaw metod. Przykładowo, klasa Console zawiera zestaw metod służących do operowania na konsoli. Myśl o klasach jak o przyborniku, paczuszce zawierającej przydatne narzędzia.
            Funkcje - Funkcje jako takie nie istnieją w C#! Zamiast tego mówimy o wspomnianych już w tej książce metodach. Idea jest w zasadzie identyczna, ale aby uniknąć nieporozumień, będę się starał nie używać słowa funkcja. Z tym słowem spotkasz się zapewne nie raz w swojej karierze, gdyż mechanizm funkcji jest obecny w wielu językach programowania. Funkcje to wydzielony blok kodu realizujący jakieś zadanie
        </p>
    </div>
</div>
