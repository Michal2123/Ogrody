Metody - metody mog¹ posiadaæ tzw. Parametry, Innymi s³owy — przekazujemy metodzie tekst do wyœwietlenia na konsoli, przekazujesz metodzie dane, na których ona operuje. Obowi¹zkowym elementem ka¿dej metody s¹ nawiasy, w których podaje siê parametry. Jednak nie wszystkie metody w œrodowisku .NET Framework maj¹ parametry — w takim wypadku pozostawiamy pusty nawias
Klasy - O klasach mo¿na powiedzieæ, i¿ jest to zestaw metod. Przyk³adowo, klasa Console zawiera zestaw metod s³u¿¹cych do operowania na konsoli. Myœl o klasach jak o przyborniku, paczuszce zawieraj¹cej przydatne narzêdzia.
Funkcje - Funkcje jako takie nie istniej¹ w C#! Zamiast tego mówimy o wspomnianych ju¿ w tej ksi¹¿ce metodach. Idea jest w zasadzie identyczna, ale aby unikn¹æ nieporozumieñ, bêdê siê stara³ nie u¿ywaæ s³owa funkcja. Z tym s³owem spotkasz siê zapewne nie raz w swojej karierze, gdy¿ mechanizm funkcji jest obecny w wielu jêzykach programowania. Funkcje to wydzielony blok kodu realizuj¹cy jakieœ zadanie
Programowanie proceduralne - Idea programowania proceduralnego zaczê³a siê pojawiaæ wraz z bardziej zaawansowanymi aplikacjami. Tradycyjny modu³ projektowania nie sprawdza³ siê dobrze, gdy programy zaczê³y byæ bardziej skomplikowane — wówczas ich konserwacja i naprawianie b³êdów by³y niezwykle trudne. Ktoœ m¹dry wymyœli³ wtedy, ¿e mo¿na by by³o dzieliæ program na mniejsze czêœci — tzw. procedury. Przyk³adowo, je¿eli napisano kod, który wyœwietla pewien komunikat i koñczy dzia³anie programu, a ów fragment jest u¿ywany wiele razy w tej aplikacji, to nale¿a³oby go dublowaæ wiele razy. Powoduje to nie tylko zwiêkszenie objêtoœci kodu, ale równie¿ potêguje podatnoœæ na b³êdy. Bo co siê stanie, je¿eli w³aœnie w tym ma³ym, wielokrotnie powtórzonym w aplikacji fragmencie, wyst¹pi b³¹d? Nale¿a³oby wówczas przeszukaæ ca³y kod i w ka¿dym miejscu poprawiaæ usterkê. Teraz, w nowoczesnych jêzykach programowania mo¿na umieœciæ pewien fragment kodu w procedurze i wywo³aæ j¹ za ka¿dym razem, kiedy zajdzie potrzeba jego wykonania! Generalnie w jêzykach takich jak C++, PHP, Java nie istniej¹ procedury, lecz funkcje. Sama idea jest identyczna, ale z uwagi na to, i¿ w C# procedury nie istniej¹, nie bêdê o nich wiêcej wspomina³.
Przestrzeñ nazw - Œrodowisko .NET Framework jest o wiele bardziej rozbudowane od swojego poprzednika — systemu WinAPI. Zawiera tysi¹ce klas i innych typów, ka¿dy posiada inn¹ nazwê. W œrodowisku Win32 nie mog³o siê zdarzyæ, ¿e istnia³y dwie funkcje o takiej samej nazwie [#]_ , co jest mo¿liwe w .NET Framework. Przyk³adowo, metoda WriteLine() wypisuje tekst, ale istnieje równie¿ metoda WriteLine(), która zapisuje go do pliku (metoda klasy TextWriter). Ich jednoczesna obecnoœæ jest niewykluczona, poniewa¿ nale¿¹ do innych klas. Podobnie jest w przypadku przestrzeni nazw (ang. namespace). W obrêbie kilku przestrzeni nazw mog¹ istnieæ klasy o tej samej nazwie.
Operator kropki - Pojêcie operator zostanie wprowadzone w dalszej czêœci rozdzia³u. Znak kropki (.) stanowi separator pomiêdzy nazw¹ przestrzeni nazw, klas¹ a nazw¹ metody. Przy pomocy tego operatora otrzymujemy dostêp do elementów danej klasy czy przestrzeni nazw.
S³owo kluczowe using - Pisanie za ka¿dym razem nazwy przestrzeni nazw, a nastêpnie klasy i metody mo¿e byæ nieco mêcz¹ce. Dlatego te¿ mo¿na wykorzystaæ s³owo kluczowe using, które informuje kompilator, ¿e w programie bêdziemy korzystali z klas znajduj¹cych siê w danej przestrzeni nazw (np. System):
